"""
This script runs the application as master, conducts the search, and returns the results.
"""

import re 
import string 
import nltk 
import spacy 
import pandas as pd 
import numpy as np 
import math 
from tqdm import tqdm 

from spacy.matcher import Matcher 
from spacy.tokens import Span 
from spacy import displacy 

from collections import Counter
from string import punctuation

import en_core_web_lg

nlp = spacy.load('en_core_web_lg')

def top_sentence(text, limit):
    keyword = []
    pos_tag = ['PROPN', 'ADJ', 'NOUN', 'VERB']
    doc = nlp(text.lower())
    for token in doc:
        if(token.text in nlp.Defaults.stop_words or token.text in punctuation):
            continue
        if(token.pos_ in pos_tag):
            keyword.append(token.text) 
    
    freq_word = Counter(keyword)
    max_freq = Counter(keyword).most_common(1)

    for w in freq_word:
        freq_word[w] = (freq_word[w]/max_freq)
    
    sent_strength = {}

    for sent in doc.sents:
        for word in sent:
            if word.text in freq_word.keys():
                if sent in sent_strength.keys():
                    sent_strength[sent]+=freq_word[word.text]
                else:
                    sent_strength[sent]=freq_word[word.text]

    summary = []
    sorted_x = sorted(sent_strength.items(), key=lambda kv: kv[1], reverse=True) #13
    
    counter = 0
    for i in range(len(sorted_x)): 
        summary.append(str(sorted_x[i][0]).capitalize()) 
        counter += 1
        if(counter >= limit):
            break 
            
    return ' '.join(summary) 

print(top_sentence('SunriseExample.txt', 10))
